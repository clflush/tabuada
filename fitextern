#! /usr/bin/perl -W

use strict;
use Data::Dumper;
use integer;


my $NUMINSTR = 8;
my $TAMWORD = 16;
my $TAMMEM = 3;

my $INSTRMOVE  = 0;
my $INSTRMOVI  = 1;
my $INSTRADD   = 2;
my $INSTRSUBI  = 3;
my $INSTRJUMP  = 4;
my $INSTRJUMPZ = 5;
my $INSTRSEND  = 6;
my $INSTRRECEIVE = 7 ;
my $MAXTAMCONFIGURATION = 5 ;


sub morre {
    my ($mensagem) = @_;

    open(FILE, '>result.ind');

    print FILE '0\n';

    close(FILE); 
}

sub saveResult {
    my ($nota) = @_;

    open(FILE, '>result.ind');

    print FILE "$nota\n";

    close(FILE); 
}


sub decodeMove {
    my ($pc, $a1, $a2) = @_;

    my $arg1 = $a1 % $TAMMEM ;
    my $arg2 = $a2 % $TAMMEM ;

    my $rl =  "
     crl [move$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: setmem ( Mem , $arg1 , getmem ( Mem , $arg2 ) ) > 
       if i == $pc  . \n" ;


    return $rl;
}

sub decodeMovi {
    my ($pc, $a1, $a2) = @_;

    my $arg1 = $a1 % $TAMMEM ;
    my $arg2 = $a2 % $TAMWORD ;

    my $rl =  "
     crl [movi$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: setmem ( Mem , $arg1 , $arg2 ) > 
       if i == $pc . \n" ;


    return $rl;
}

sub decodeAdd {
    my ($pc, $a1, $a2) = @_;

    my $arg1 = $a1 % $TAMMEM ;
    my $arg2 = $a2 % $TAMMEM ;

    my $rl =  "
     crl [add$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: setmem ( Mem , $arg1 , ( addmem ( getmem ( Mem , $arg1 ) ,getmem ( Mem , $arg2 ) ) ) )  >
       if i == $pc . \n" ;


    return $rl;
}

sub decodeSubi {
    my ($pc, $a1, $a2) = @_;

    my $arg1 = $a1 % $TAMMEM ;
    my $arg2 = $a2 % $TAMWORD ;

    my $rl =  "
     crl [subi$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: setmem ( Mem , $arg1 , ( submem ( getmem ( Mem , $arg1 ) ,  $arg2 ) ) ) >
       if i == $pc . \n" ;


    return $rl;
}

sub decodeJump {
    my ($pc, $a1, $tm ) = @_;

    my $arg1 = $a1 % $tm ;

    my $rl =  "
     crl [jump$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: $arg1 , neighbors: N1 , memory: Mem >
       if i == $pc . \n" ;


    return $rl;
}


sub decodeJumpz {
    my ($pc, $a1, $a2, $tm ) = @_;

    my $arg1 = $a1 % $TAMMEM ;
    my $arg2 = $a2 % $tm;

    my $rl =  "
     crl [jumpz$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: $arg2 , neighbors: N1 , memory: Mem >
       if ( i == $pc ) /\\ ( getmem ( Mem , $arg1 ) == 0 ) . \n" ;
    $rl .=  "
     crl [jumpnz$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: Mem >
       if ( i == $pc ) /\\ ( getmem ( Mem , $arg1 ) =/= 0 ) . \n" ;

    

    return $rl;
}


sub decodeSend {
    my ($pc, $a1 ) = @_;

    my $arg1 = $a1 % $TAMMEM ;

    my $rl =  "
     crl [send$pc] :
      [ < A : Node | pc: i , neighbors: N1 , memory: Mem > Conf ]
       =>
      [ < A : Node | pc: i + 1 , neighbors: N1 , memory: Mem > Conf 
      multimsg getmem ( Mem , $arg1 ) from A to N1 ] 
     if ( i == $pc ) /\\ ( lengthConfiguration( [ Conf ] ) < $MAXTAMCONFIGURATION ) . \n" ;

    return $rl;
}


sub decodeReceive {
    my ($pc, $a1  ) = @_;

    my $arg1 = $a1 % $TAMMEM ;

    my $rl =  "
     crl [receive$pc] :
      < A : Node | pc: i , neighbors: N1 , memory: Mem >
      msg j from B to A 
       =>
      < A : Node | pc: i + 1 , neighbors: N1 , memory: setmem ( Mem , $arg1 , j ) >
     if ( i == $pc ) . \n" ;

    return $rl;
}




sub escreveModeloMaude {
    my ($refind) = @_;
    my $modelo;
    my @ind = @$refind;

    my $tamcode = scalar @ind;
    my $tm = $tamcode / 3;

    my $regrareescrita =  "" ;

    #decodifica programa
    my $i; my $j;
    for ($i = 0 ; $i < ($tamcode / 3) ; $i ++ ) {
	my $instrution = $ind[3 * $i] % $NUMINSTR ;
      
        if ( $instrution == $INSTRMOVE )   { $regrareescrita .= decodeMove ($i, $ind[3 * $i + 1], $ind[3 * $i + 2] ); }
        if ( $instrution == $INSTRMOVI )   { $regrareescrita .= decodeMovi ($i, $ind[3 * $i + 1], $ind[3 * $i + 2]); }
        if ( $instrution == $INSTRADD  )   { $regrareescrita .= decodeAdd  ($i, $ind[3 * $i + 1], $ind[3 * $i + 2]); }
        if ( $instrution == $INSTRSUBI )   { $regrareescrita .= decodeSubi ($i, $ind[3 * $i + 1], $ind[3 * $i + 2]); }
        if ( $instrution == $INSTRJUMP )   { $regrareescrita .= decodeJump ($i, $ind[3 * $i + 1], $tm ); }
        if ( $instrution == $INSTRJUMPZ)   { $regrareescrita .= decodeJumpz($i, $ind[3 * $i + 1], $ind[3 * $i] + 2, $tm ); }
	if ( $instrution == $INSTRSEND)    { $regrareescrita .= decodeSend($i, $ind[3 * $i + 1]); }
	if ( $instrution == $INSTRRECEIVE) { $regrareescrita .= decodeReceive($i, $ind[3 * $i + 1], $ind[3 * $i] + 2, $tm ); }
    }

#    print $regrareescrita, "\n" ;

    #inicio do modelo
    $modelo = "

in model-checker.maude

fmod MEMORY is
  pr INT .

  sort Memory .
  subsort Int < Memory .

  op emptymem : -> Memory .
  op _;_ : Memory Memory -> Memory [ assoc id: emptymem ] .
  
  op getmem : Memory Nat -> Int .
  op setmem : Memory Nat Int -> Memory .
  op addmem : Int Int -> Int .
  op submem : Int Int -> Int .

  vars T : Nat .
  vars I J : Int .
  vars M M' : Memory .

  eq getmem ( I ; M , 0) = I .
  eq getmem ( I ; M , J ) =
    getmem ( M , J - 1 ) .  


  eq setmem ( I ; M , 0, J ) = J ; M .
  eq setmem ( I ; M , T, J ) =
   I ; setmem ( M , T - 1, J ) .   


  eq addmem ( I , J ) = if ( abs ( I + J ) > $TAMWORD ) then 
                     ( I + J) rem $TAMWORD
                     else 
                     ( I + J ) fi .

  eq submem ( I , J ) = if ( abs ( I - J ) > $TAMWORD ) then 
                     ( I - J) rem $TAMWORD
                     else 
                     ( I - J ) fi .

endfm


mod NODE-NETWORK is
   protecting INT .
   protecting QID .
   inc CONFIGURATION .
   pr MEMORY .

   subsort Qid < Oid .
   sort OidSet .
   subsort Oid < OidSet .

   sort MyConfiguration .

   op emptyset : -> OidSet [ctor] .
   op _;_ : OidSet OidSet -> OidSet [ ctor assoc comm id: emptyset ] .
   op [_] : Configuration -> MyConfiguration .
   op lengthConfiguration : MyConfiguration -> Int .

   op multimsg_from_to_ : Int Oid OidSet -> Configuration [ctor] .

   op Node : -> Cid .
   op neighbors:_ : OidSet -> Attribute [ gather (&) ] .
   op pc:_ : Int -> Attribute [ gather (&) ] .
   op memory:_ : Memory -> Attribute [ gather (&) ] .

   op msg_from_to_ : Int Oid Oid -> Msg .

   vars A B O O' : Oid .
   vars i j : Int .
   vars N1 N2 OS : OidSet .
   vars M : Msg .
   vars Obj : Object .
   vars Mem Mem' : Memory .
   vars Conf : Configuration .

   eq lengthConfiguration ( [ none ] ) = 0 .
   eq lengthConfiguration ( [ M Conf ] ) = 
     1 + lengthConfiguration ( [ Conf ] ) .
   eq lengthConfiguration ( [ Obj Conf ] ) = 
     1 + lengthConfiguration ( [ Conf ] ) .
   

   eq multimsg i from O to emptyset = none .
   eq multimsg i from O to O' ; OS =
     (msg i from O to O' )
     (multimsg i from O to OS) .

   crl [limit] :
     < A : Node | pc: i , neighbors: N1 , memory: Mem >
      =>
     < A : Node | pc: 0 , neighbors: N1 , memory: Mem >
       if i >= $tm . 

   $regrareescrita

endm 



mod NETWORK-PREDS is
   inc SATISFACTION .
   inc CONFIGURATION .
   pr NODE-NETWORK .
   
   subsort MyConfiguration < State .


   op msgto   : Oid -> Prop .
   op msgfrom : Oid -> Prop .
   op msgfromto : Oid Oid -> Prop .
   op valmem : Oid Int Int  -> Prop .

   vars C : Configuration .
   vars i j k : Int .
   vars O O' : Oid .
   vars OS : OidSet .
   vars Mem : Memory .

   eq [ C ( msg i from O to O' ) ] |= msgto ( O' ) = true .
   eq [ C ( msg i from O to O' ) ] |= msgfrom ( O ) = true .
   eq [ C ( msg i from O to O' ) ] |= msgfromto ( O , O' ) = true .

   ceq [ C < O : Node | pc: i , neighbors: OS , memory: Mem > ] |= valmem ( O , j , k ) = true 
     if getmem ( Mem , j ) == k .
endm


mod TESTENETWORK is 
   pr NODE-NETWORK .
   inc NETWORK-PREDS .
   inc MODEL-CHECKER .
   inc LTL-SIMPLIFIER .

   op User : -> Cid .


   op usuario : -> Object .
   op initial : -> MyConfiguration [ctor] .
   op initial2 : -> MyConfiguration [ctor] .
   op initial3 : -> MyConfiguration [ctor] .
   op initial4 : -> MyConfiguration [ctor] .


   vars O O' : Oid .
   vars C : Configuration .

   eq usuario = < 'usuario : User | none > .

   eq initial = [ < 'ttt : Node | pc: 0 , memory: 0 ; 0 ; 0 , neighbors: emptyset > ] .
   eq initial2 = [ < 'ttt : Node | pc: 0 , memory: 1 ; 1 ; 1 , neighbors: 'A  > ] .
   eq initial3 = [ usuario < 'A : Node | pc: 0 , memory: 1 ; 1 ; 1 , neighbors: 'B  > 
                 < 'B : Node | pc: 0 , memory: 0 ; 0 ; 0 , neighbors: 'A  > ] .

   eq initial4 = [ usuario < 'A : Node | pc: 0 , memory: 1 ; 1 ; 1 , neighbors: 'B ; 'C > 
                 < 'B : Node | pc: 0 , memory: 0 ; 0 ; 0 , neighbors: 'A  > 
                 < 'C : Node | pc: 0 , memory: 0 ; 0 ; 0 , neighbors: 'A  > 
                 ] .


   crl [sendmessage] :
     [ < O : User | none > C ]
   =>
     [ C < O : User | none > (msg 1 from O to 'A ) ] 
   if ( lengthConfiguration( [ C ] ) < ( $MAXTAMCONFIGURATION - 1 ) ) .

endm

red modelCheck ( initial3 , <> msgto ( 'B ) ) . 
red modelCheck ( initial3 , <> msgfrom ( 'A ) ) . 
red modelCheck ( initial3 , <> msgfromto ( 'A , 'B ) ) .
red modelCheck ( initial3 , <> msgfromto ( 'usuario , 'A ) ) .  
red modelCheck ( initial3 , ( <> msgfromto ( 'usuario , 'A )) -> ( <> msgfromto( 'A , 'B ) ) ) . 
red modelCheck ( initial3 , ( [] <> msgfromto ( 'usuario , 'A ) ) ) . 
red modelCheck ( initial3 , ( [] <> msgfromto ( 'A , 'B ) ) ) . 
red modelCheck ( initial3 , ( [] <> msgfromto ( 'usuario , 'A ) ) -> ( [] <> msgfromto( 'A , 'B ) ) ) . 

quit 

";


#search in TESTENETWORK : initial =>! c:Configuration .
#search in TESTENETWORK : initial2 =>! c:Configuration .
#search in TESTENETWORK : initial3 =>! c:Configuration .   

    return $modelo;
}


sub leInd {
    my @ind;

    open( IN, 'gen.ind') or morre('Falha ao abrir arquivo gen.ind\n');

    while(<IN>) {
	chomp;
	push @ind, $_;
    }

    close IN;
    return \@ind;
}






my $refind = leInd();
my @ind = @$refind;


#print "Ola\n", Dumper(@ind);

open( OUT, '>modelo.maude') or morre('Falha ao abrir arquivo modelo.maude\n');
print OUT escreveModeloMaude($refind);
close OUT;


my $result = `ulimit -v 102400 ; ./maude.linux -no-ansi-color modelo.maude 2>> erros.txt`;

#print $result;
if ($result =~ m/Bye/ ) {
   my @counterexamples = $result =~ m/counterexample/g ;
   #print "Contra exemplos ", Dumper @counterexamples ;
   my $nota = 100 + (8 - (scalar @counterexamples) ) * 100;
   saveResult($nota);
} else {
   saveResult(0);
}


