#+TITLE: Tabuada
#+AUTHOR: Trumae da Ilha
#+SETUPFILE: setup.config

* Introduction

** Random number generator

*intRand* is a thread safe random number generator

#+NAME: INTRAND
#+BEGIN_SRC cpp :results silent
int intRand(const int & min, const int & max) {
    static thread_local std::mt19937 generator;
    std::uniform_int_distribution<int> distribution(min,max);
    return distribution(generator);
}
#+END_SRC

* Genetic Programming 
** Individuo

Let's represent an *Individual* as a vector of integer.

#+NAME: TYPE_IND
#+HEADER: :includes <vector>
#+BEGIN_SRC cpp :results silent
using Individual = std::vector<int>;
#+END_SRC

The function *print* can show the content of an *Individual* on 
*stdout*.

#+NAME: PRINTINDIVIDUAL
#+BEGIN_SRC cpp :results silent 
void print(Individual &ind) {
   std::cout << "< ";
   for(auto d : ind) 
      std::cout << d << " ";
   std::cout << ">";
}
#+END_SRC

#+NAME: MAKERANDINDIVIDUAL
#+BEGIN_SRC cpp :results silent
Individual makeRandIndividual (int t, int min, int max){
    Individual ind = {};

    for(int i = 0; i < t; i++)
       ind.push_back(intRand(min, max));

    return ind;
}
#+END_SRC

*** Print example

#+NAME: PRINT_EXAMPLE
#+BEGIN_SRC cpp :results silent :exports code 
Individual ind = {1,2,3,4};
Individual randind = makeRandIndividual(6,1,10);

print(ind);
std::cout << std::endl;
print(randind);
#+END_SRC

#+NAME: PREAMBLE1
#+HEADER: :includes <iostream> <vector> <random>
#+BEGIN_SRC cpp :results silent :noweb yes :main no
<<INTRAND>>
<<TYPE_IND>>
<<PRINTINDIVIDUAL>>
<<MAKERANDINDIVIDUAL>>
#+END_SRC

#+HEADER: :includes <iostream> <vector> <random>
#+BEGIN_SRC cpp :noweb yes :exports results :main no :results output
<<PREAMBRE1>>

int main() {
<<PRINT_EXAMPLE>>
}
#+END_SRC

#+RESULTS:

** Populacao

#+NAME: TYPE_POP
#+BEGIN_SRC cpp :results silent
struct Populacao {
  double txcross;
  double txmut;
  std::vector<Individuo> data;
};
#+END_SRC




#+NAME: TYPE_STRUCTS
#+HEADERS: :includes <iostream> <vector>
#+BEGIN_SRC cpp :results silent :exports none :tangle yes :noweb yes :main no
<<TYPE_IND>>
<<PRINTINDIVIDUO>>
<<TYPE_POP>>
#+END_SRC


* Examples orgmode

#+header: :var mystring="Sunday" :var myint=145 :var mydouble=3.14
#+BEGIN_SRC C :exports both
  printf ("mystring %s\n", mystring);
  printf ("myint    %d\n", myint);
  printf ("mydouble %g\n", mydouble);
#+END_SRC

#+RESULTS:
| mystring | Sunday |
| myint    |    145 |
| mydouble |   3.14 |


#+header: :var mystring="Sunday" :var myint=145 :var mydouble=3.14
#+BEGIN_SRC C
  printf ("mystring %s\n", mystring);
  printf ("myint    %d\n", myint);
#+END_SRC

#+RESULTS:
| mystring | Sunday |
| myint    |    145 |


#+BEGIN_SRC lisp
(princ (+ 3 4))
#+END_SRC

#+RESULTS:
: 7

* All together


